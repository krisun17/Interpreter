

module AbsexpGram where

-- Haskell module generated by the BNF converter




data Exp =
   EAnd Exp Exp
 | EOr Exp Exp
 | ENot Exp
 | EEq Exp Exp
 | Elt Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | Einc Exp
 | Edec Exp
 | Ediv Exp Exp
 | EMul Exp Exp
 | EInt Integer
 | Evar String
  deriving (Eq,Ord,Show,Read)

data Ass =
   Assign String Exp
  deriving (Eq,Ord,Show,Read)

data Stm =
   Sass Ass
 | Sempty
 | Swhile Exp Stm
 | Selif Exp Stm Stm
 | Sif Exp Stm
 | SBlock Stm
 | Scall String [String]
 | Sfort Ass Exp Stm
 | Sford Ass Exp Stm
 | Sprint String
  deriving (Eq,Ord,Show,Read)

data Vdec =
   VDecl String
  deriving (Eq,Ord,Show,Read)

data Adec =
   ADecr String
 | ADecv Exp
  deriving (Eq,Ord,Show,Read)

data Pdec =
   PDecl String [Adec] Stm
  deriving (Eq,Ord,Show,Read)

data Prg =
   Prog [Vdec] [Pdec] [Stm]
  deriving (Eq,Ord,Show,Read)

