module SkelexpGram where

-- Haskell module generated by the BNF converter

import AbsexpGram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transExp :: Exp -> Result
transExp x = case x of
  EAnd exp1 exp2  -> failure x
  EOr exp1 exp2  -> failure x
  ENot exp  -> failure x
  EEq exp1 exp2  -> failure x
  Elt exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  Einc exp  -> failure x
  Edec exp  -> failure x
  Ediv exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EInt n  -> failure x
  Evar str  -> failure x


transAss :: Ass -> Result
transAss x = case x of
  Assign str exp  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  Sass ass  -> failure x
  Sempty  -> failure x
  Swhile exp stm  -> failure x
  Selif exp stm1 stm2  -> failure x
  Sif exp stm  -> failure x
  SBlock stm  -> failure x
  Scall str strs  -> failure x
  Sfort ass exp stm  -> failure x
  Sford ass exp stm  -> failure x
  Sprint str  -> failure x


transVdec :: Vdec -> Result
transVdec x = case x of
  VDecl str  -> failure x


transAdec :: Adec -> Result
transAdec x = case x of
  ADecr str  -> failure x
  ADecv exp  -> failure x


transPdec :: Pdec -> Result
transPdec x = case x of
  PDecl str adecs stm  -> failure x


transPrg :: Prg -> Result
transPrg x = case x of
  Prog vdecs pdecs stms  -> failure x



