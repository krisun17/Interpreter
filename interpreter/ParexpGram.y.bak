-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParexpGram where
import AbsexpGram
import LexexpGram
import ErrM

}

%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pAss Ass
%name pStm Stm
%name pVdec Vdec
%name pAdec Adec
%name pPdec Pdec
%name pListVdec ListVdec
%name pListPdec ListPdec
%name pListAdec ListAdec
%name pListStm ListStm
%name pListString ListString
%name pPrg Prg

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  '/' { PT _ (TS _ 6) }
  ':=' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  'Dec(' { PT _ (TS _ 11) }
  'Inc(' { PT _ (TS _ 12) }
  'and' { PT _ (TS _ 13) }
  'begin' { PT _ (TS _ 14) }
  'call' { PT _ (TS _ 15) }
  'do' { PT _ (TS _ 16) }
  'downto' { PT _ (TS _ 17) }
  'else' { PT _ (TS _ 18) }
  'end' { PT _ (TS _ 19) }
  'fi' { PT _ (TS _ 20) }
  'for' { PT _ (TS _ 21) }
  'if' { PT _ (TS _ 22) }
  'not' { PT _ (TS _ 23) }
  'or' { PT _ (TS _ 24) }
  'print' { PT _ (TS _ 25) }
  'procedure' { PT _ (TS _ 26) }
  'then' { PT _ (TS _ 27) }
  'to' { PT _ (TS _ 28) }
  'var' { PT _ (TS _ 29) }
  'while' { PT _ (TS _ 30) }

L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Exp :: { Exp }
Exp : Exp 'and' Exp1 { EAnd $1 $3 } 
  | Exp 'or' Exp1 { EOr $1 $3 }
  | 'not' Exp1 { ENot $2 }
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '=' Exp2 { EEq $1 $3 } 
  | Exp1 '<' Exp2 { Elt $1 $3 }
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '+' Exp3 { EAdd $1 $3 } 
  | Exp2 '-' Exp3 { ESub $1 $3 }
  | 'Inc(' Exp ')' { Einc $2 }
  | 'Dec(' Exp ')' { Edec $2 }
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '/' Exp4 { Ediv $1 $3 } 
  | Exp3 '*' Exp4 { EMul $1 $3 }
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Integer { EInt $1 } 
  | String { Evar $1 }
  | '(' Exp ')' { $2 }


Ass :: { Ass }
Ass : String ':=' Exp { Assign $1 $3 } 


Stm :: { Stm }
Stm : Ass ';' { Sass $1 } 
  | ';' { Sempty }
  | 'while' '(' Exp ')' 'do' Stm { Swhile $3 $6 }
  | 'if' '(' Exp ')' 'then' Stm 'else' Stm 'fi' { Selif $3 $6 $8 }
  | 'if' '(' Exp ')' 'then' Stm 'fi' { Sif $3 $6 }
  | 'begin' Stm 'end' { SBlock $2 }
  | 'call' String '(' ListString ')' { Scall $2 $4 }
  | 'for' Ass 'to' Exp Stm { Sfort $2 $4 $5 }
  | 'for' Ass 'downto' Exp Stm { Sford $2 $4 $5 }
  | 'print' String { Sprint $2 }


Vdec :: { Vdec }
Vdec : 'var' String ';' { VDecl $2 } 


Adec :: { Adec }
Adec : 'var' String { ADecr $2 } 
  | String { ADecv $1 }


Pdec :: { Pdec }
Pdec : 'procedure' String '(' ListAdec ')' Stm ';' { PDecl $2 $4 $6 } 


ListVdec :: { [Vdec] }
ListVdec : {- empty -} { [] } 
  | ListVdec Vdec { flip (:) $1 $2 }


ListPdec :: { [Pdec] }
ListPdec : {- empty -} { [] } 
  | ListPdec Pdec { flip (:) $1 $2 }


ListAdec :: { [Adec] }
ListAdec : {- empty -} { [] } 
  | Adec { (:[]) $1 }
  | Adec ';' ListAdec { (:) $1 $3 }


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | Stm { (:[]) $1 }
  | Stm ';' ListStm { (:) $1 $3 }


ListString :: { [String] }
ListString : {- empty -} { [] } 
  | String { (:[]) $1 }
  | String ';' ListString { (:) $1 $3 }


Prg :: { Prg }
Prg : ListVdec ListPdec ListStm { Prog (reverse $1) (reverse $2) $3 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

